apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "com.hisnow.pkg_project"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
}
dependencies {
    compile project(':androidlib') //此处填写需要打包的Android Library Project name
}
task sync_jars() << {
    //把所有依赖的.jar库都拷贝到build/aar/libs下
    copy {
        into buildDir.getPath() + "/aar/libs"
        from configurations.compile.findAll {
            it.getName().endsWith(".jar")
        }
    }
}
task sync_aars(dependsOn: ':androidlib:assembleRelease') << {
    //把所有依赖的.aar库里包含的classes.jar都拷贝到build/aar/libs下，并重命名以不被覆盖
    def jar_name
    def aar_path
    def dest_dir = buildDir.getPath() + "/aar"
    configurations.compile.findAll {
        it.getName().endsWith(".aar")
    }.collect {
        aar_path = it.getPath()
        jar_name = "libs/" + it.getName().replace(".aar", ".jar")
        copy {
            from zipTree(aar_path)
            into dest_dir
            include "**/*"
            rename 'classes.jar', jar_name
        }
    }
}
task fataar(dependsOn: [sync_aars, sync_jars]) << {
//    task(obfuse_classes_jar, type: proguard.gradle.ProGuardTask) {
//        //把build/aar/libs/*.jar混淆后生成build/aar/classes.jar
//        configuration "proguard.cfg"
//        injars buildDir.getPath() + "/aar/libs"
//        outjars buildDir.getPath() + "/aar/classes.jar"
//        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
//        libraryjars "${System.getProperty('java.home')}/Contents/Classes/classes.jar"
//        libraryjars System.getenv("ANDROID_HOME") + "/platforms/android-19/android.jar"
//    }.execute()
    task(gen_aar, type: Zip) {
        //把生成最终的aar包，注意libs目录需要被排除
        def dest_dir = buildDir.getPath() + "/aar/"
        baseName = "mysdk-all"
        extension = "aar"
        destinationDir = file(buildDir.getPath())
        from dest_dir
        exclude "libs"
    }.execute()
}